WEBVTT

1
00:00:06.000 --> 00:00:07.960
Welcome to class.

2
00:00:08.200 --> 00:00:12.280
Last lecture we talked about arithmetic
expressions.

3
00:00:12.280 --> 00:00:18.570
And we know that the we could use the
rules of precedence to actually compute a

4
00:00:18.570 --> 00:00:24.390
value for that arithmetic expression.
Now in this lecture we're going to show

5
00:00:24.390 --> 00:00:30.370
that we can save that value in a variable.
We're going to assign a name to that

6
00:00:30.370 --> 00:00:36.820
variable and then we can use that variable
once subsequent arithmetic expressions.

7
00:00:36.820 --> 00:00:39.990
Why we want to do that?
Well there's a couple reasons.

8
00:00:39.990 --> 00:00:44.590
First, if the expression was big and
involved a complicated calculation, we

9
00:00:44.590 --> 00:00:49.320
might not want to actually do that again.
So saving that value in a name avoids

10
00:00:49.320 --> 00:00:51.950
computing the same expression over and
over.

11
00:00:51.950 --> 00:00:57.220
Second thing is, by giving this value a
name we can help the person that's looking

12
00:00:57.220 --> 00:01:01.940
at your code understand what your
computation, your program is doing.

13
00:01:01.940 --> 00:01:07.210
So, I'm going to walk you through a few
examples of using variables inside your

14
00:01:07.210 --> 00:01:12.070
program to basically make your program
more efficient or make it more

15
00:01:12.070 --> 00:01:15.060
understandable.
Okay, let's do some examples.

16
00:01:17.360 --> 00:01:22.510
So let's talk about variables.
So a variable is a placeholder for storing

17
00:01:22.510 --> 00:01:25.140
a value.
Reclaim and store it to avoid

18
00:01:25.140 --> 00:01:30.580
re-computation, or to give a value a name
to help understand what it represents.

19
00:01:30.790 --> 00:01:35.830
In Python valid variable names consist of
combinations of letters, numbers and the

20
00:01:35.830 --> 00:01:38.720
underscore character.
This character right here.

21
00:01:38.910 --> 00:01:42.540
The name has to start with either a letter
or a underscore.

22
00:01:42.540 --> 00:01:46.600
We'll talk about when you wanna use
underscore later in the class.

23
00:01:46.780 --> 00:01:51.770
The variable names are case sensitive.
Typically, for now you should start with

24
00:01:51.770 --> 00:01:56.750
lowercase, then we'll tell you when you
use uppercase conventionally later in the

25
00:01:56.750 --> 00:01:59.580
class.
Here's some examples of a, ninja, very

26
00:01:59.580 --> 00:02:01.620
nice variable name.
Capital ninja.

27
00:02:01.620 --> 00:02:06.730
Pretty good variable name also but don't
use it until later in the class.

28
00:02:06.730 --> 00:02:10.100
Ninja underscore, underscore, underscore,
underscore.

29
00:02:10.100 --> 00:02:13.330
Great gamer name, maybe not so great
Python name.

30
00:02:13.530 --> 00:02:15.290
Illegal names.
A number.

31
00:02:15.290 --> 00:02:17.940
1337.
That actually has a meaning, that is

32
00:02:17.940 --> 00:02:21.630
called leet speak.
One as in L, three as in E, E, seven as a

33
00:02:21.630 --> 00:02:24.670
T, leet.
You can't be a leet, ninja unfortunately,

34
00:02:24.670 --> 00:02:29.270
at least not using numbers.
If you want to have a multiple word name,

35
00:02:29.270 --> 00:02:33.150
variable name, it's fine.
Just connect all the words using an

36
00:02:33.150 --> 00:02:37.880
underscore, that's python convention.
So, for example, a legal name is elite

37
00:02:37.880 --> 00:02:40.730
ninja.
If you want that to be even more elite you

38
00:02:40.730 --> 00:02:44.640
could be leet ninja.
Or if you want to quantify your ninjaness,

39
00:02:44.640 --> 00:02:48.490
you can say, ninja<u>elite.elite.
Unfortunately, you still can't start with</u>

40
00:02:48.490 --> 00:02:53.400
the number, so this is not going to work.
How do you actually take that value and

41
00:02:53.580 --> 00:02:56.130
assign it to a variable?
Well, you use equals.

42
00:02:56.130 --> 00:02:59.790
This is the same thing you did in, say
middle school algebra.

43
00:02:59.790 --> 00:03:03.970
You say, variable equal value.
Now notice that if you want to test to see

44
00:03:03.970 --> 00:03:06.590
if two values are equal you use a double
equal.

45
00:03:06.590 --> 00:03:10.250
So, single equal is assignment, double
equal is equality testing.

46
00:03:10.250 --> 00:03:15.040
Now, probably the most critical thing that
you need to do whenever you want to go

47
00:03:15.040 --> 00:03:19.660
through and actually choose variable names
is to think about something that's

48
00:03:19.660 --> 00:03:23.740
memorable that will help you understand
what the variable represents.

49
00:03:23.740 --> 00:03:27.420
So, for example, if I will go through and
I say up here, I say M.

50
00:03:27.420 --> 00:03:34.270
Variable M, what does it represent?
Not sure but if I say my underscore name,

51
00:03:34.270 --> 00:03:38.290
I bet you can guess what that's going to
be.

52
00:03:38.290 --> 00:03:44.970
It's going to be Joe Warren.
So I can ask to print that out.

53
00:03:44.970 --> 00:03:51.010
Print my name, run that.
Sure enough it's Joe Warren.

54
00:03:51.370 --> 00:03:58.600
I get another variable. I can say, my age.
My age, number is 51.

55
00:04:04.340 --> 00:04:08.200
Okay.
So, we've assigned some values to some

56
00:04:08.200 --> 00:04:13.410
variables, what can we do with them?
Well, birthdays are fun.

57
00:04:13.410 --> 00:04:17.450
I just, I actually had a birthday in
February.

58
00:04:17.450 --> 00:04:22.670
So, next February, I'll have another one.
So, what could I do?

59
00:04:22.670 --> 00:04:27.790
I could go through and update my age.
How would I do that?

60
00:04:27.790 --> 00:04:35.430
Well, I could say something like my age is
equal to 51 plus one, then I could print

61
00:04:35.430 --> 00:04:37.210
my age.
So if I run that.

62
00:04:37.210 --> 00:04:42.090
It's gonna be 52, surprise, surprise.
But notice this is kind of a foolish

63
00:04:42.090 --> 00:04:45.750
expression here.
Because I already had, okay, my current

64
00:04:45.750 --> 00:04:51.100
age right up here in this variable my age.
So, in fact, what I should have really

65
00:04:51.100 --> 00:04:54.360
said is something like, my age is = to my
age +one.

66
00:04:54.840 --> 00:04:57.570
And notice, that now works no matter what
my current age.

67
00:04:57.570 --> 00:05:00.450
This is always going to give me one more
than the current age.

68
00:05:00.590 --> 00:05:03.910
Computations like this, where I take a
variable, I do something to it.

69
00:05:03.910 --> 00:05:06.790
And I update that second variable, are
actually so frequent.

70
00:05:06.790 --> 00:05:10.450
But there's a shorthand that you can use
in Python, and again, lots of other

71
00:05:10.450 --> 00:05:12.840
languages.
Where you can use an operator which is

72
00:05:12.840 --> 00:05:15.480
called plus =.
So the plus = operator takes the thing on

73
00:05:15.480 --> 00:05:19.180
the left hand side, gets its value.
Takes this operator and applies it to the

74
00:05:19.180 --> 00:05:21.920
right hand side.
And then stuffs the value back into the

75
00:05:21.920 --> 00:05:24.410
left hand side.
So this does exactly the same thing.

76
00:05:24.410 --> 00:05:27.300
And then it comes back with my age is
equal to 52.

77
00:05:27.480 --> 00:05:31.310
Let's see, what's another one?
Let's do one more example real quick.

78
00:05:31.310 --> 00:05:35.950
So I'm going to tell you a story about
another variable and this one may not be,

79
00:05:35.950 --> 00:05:40.640
seem to be exactly as understandable to
begin with, but I'm going to I'm going to

80
00:05:40.640 --> 00:05:45.920
have a variable called magic pill.
And I'm going to print out.

81
00:05:47.660 --> 00:05:56.480
My age minus the magic pill.
So if I do that.

82
00:05:56.880 --> 00:06:02.250
Come back with, well, 22.
Alright, so let's go through and comment

83
00:06:02.250 --> 00:06:06.580
out this, so we get the correct age.
Get 21.

84
00:06:06.580 --> 00:06:09.860
So, what is magic pill?
So, let me quick, quickly tell you the

85
00:06:09.860 --> 00:06:13.140
story of the magic pill.
So, I have three children seventeen,

86
00:06:13.140 --> 00:06:16.360
fifteen and twelve.
And, my fifteen year old, perhaps at one

87
00:06:16.360 --> 00:06:21.020
point, that he was going to go through and
invent a pill that took 30 years off your

88
00:06:21.020 --> 00:06:23.020
age.
So, he was going to give it away.

89
00:06:23.020 --> 00:06:27.130
So my oldest son said, wow, you know,
that's, that's not wise, you should sell

90
00:06:27.130 --> 00:06:29.800
that pill, you know, we could make a lot
of money.

91
00:06:29.800 --> 00:06:34.300
So, we had a long discussion about what it
would, the value of a pill that took 30

92
00:06:34.300 --> 00:06:37.470
years off your age would be.
And so we decided on $300,000.

93
00:06:37.470 --> 00:06:43.050
And so, there's still some doubt from my
fifteen year old that this was actually

94
00:06:43.050 --> 00:06:46.330
really worth $300,000, so he called his
granddad.

95
00:06:46.330 --> 00:06:53.930
Now his granddad was.
74.

96
00:06:53.930 --> 00:07:00.940
And he asked grandad, would you, would you
pay $300,000 for a pill that took 30 years

97
00:07:00.940 --> 00:07:05.160
off your age.
And so grandad had an interesting

98
00:07:05.160 --> 00:07:11.490
response, thought for a little bit, and he
said, I'll take two of those pills.

99
00:07:11.490 --> 00:07:17.240
So, let's print out what would happen if
grandad bought two pills.

100
00:07:18.500 --> 00:07:22.880
B14, I think it's a wise choice.
So, give your variable names memorable

101
00:07:22.880 --> 00:07:27.830
names, give your variables memorable
names, it'll help you when you go back and

102
00:07:27.830 --> 00:07:33.030
look at your program and other people go
back and look your program to understand

103
00:07:33.030 --> 00:07:34.370
what's going on.
Okay.

104
00:07:34.370 --> 00:07:39.920
Give me a sec.
So let's finish up with a more serious

105
00:07:39.920 --> 00:07:45.080
example that does something useful.
So here I have in my comments, we'd like

106
00:07:45.080 --> 00:07:50.410
to convert from Fahrenheit to Celsius.
So I've actually written down a formula

107
00:07:50.410 --> 00:07:56.080
here that kind of describes the conversion
from a temperature F in Fahrenheit, to a

108
00:07:56.080 --> 00:08:00.390
temperature C in Celsius.
So let's just turn that into a python

109
00:08:00.390 --> 00:08:03.530
code.
So what I'm gonna do is, I'm gonna define

110
00:08:03.530 --> 00:08:08.320
a value for the Fahrenheit.
So I'm gonna be a little more deliberative

111
00:08:08.320 --> 00:08:13.380
here and actually give it a longer name.
I'm gonna call it Temp Fahrenheit.

112
00:08:13.840 --> 00:08:17.390
And I'm gonna initialize it to say, let's
make it 32.

113
00:08:17.390 --> 00:08:21.550
I think I know what the value of 32
Fahrenheit is in Celsius.

114
00:08:21.550 --> 00:08:26.340
And so then what I need to do?
I want to go through my expression that

115
00:08:26.340 --> 00:08:29.890
converts ten Fahrenheit into temperature
in Celsius.

116
00:08:29.890 --> 00:08:38.720
So I can say ten Celsius Is equal to,
let's see, five nights.

117
00:08:39.180 --> 00:08:43.900
Times, well what are we going to use, it's
going to be the temperature in Fahrenheit.

118
00:08:43.900 --> 00:08:51.380
So it's tempFahrenheit.
Minus 32 and then let's print out what the

119
00:08:51.380 --> 00:08:56.000
resulting temperature is.
So we'll print temp.

120
00:08:59.340 --> 00:09:03.370
Now, one thing it's often good to do is,
when you type in a piece of code and

121
00:09:03.370 --> 00:09:06.400
you're testing it.
Instead of just typing values, and then

122
00:09:06.400 --> 00:09:09.430
kind of running it, and hoping that things
come out right.

123
00:09:09.430 --> 00:09:13.210
It's often good to think, okay.
What should the answer be before you run

124
00:09:13.210 --> 00:09:15.870
the code?
So I said I knew the value of 32 degrees

125
00:09:15.870 --> 00:09:19.000
Fahrenheit and Celsius.
And yes, that's zero degrees Celsius,

126
00:09:19.000 --> 00:09:22.090
that's freezing.
So let's see what comes out here if I run

127
00:09:22.090 --> 00:09:22.830
it.
So, good.

128
00:09:22.830 --> 00:09:26.300
Came out 32 Fahrenheit is zero degrees
Celsius.

129
00:09:26.300 --> 00:09:32.190
Now, we also know that, let's see, 212
degrees Fahrenheit should be 100 degrees

130
00:09:32.190 --> 00:09:35.730
Celsius.
So the value of writing this expression

131
00:09:35.730 --> 00:09:40.810
down here is that now we can just go
through, and change the value of

132
00:09:40.810 --> 00:09:45.290
Fahrenheit to be 212.
And run it again, and if we're doing well,

133
00:09:45.290 --> 00:09:49.450
it comes out to be 100.
Then let's do it the other way.

134
00:09:49.450 --> 00:09:56.090
Let's go through and write an expression
that converts from Celsius to Fahrenheit,

135
00:09:56.090 --> 00:09:59.730
so you get one more little piece of
practice.

136
00:09:59.730 --> 00:10:06.130
So I could say, Tip Celsius is equal to
zero, and then I can write my expression

137
00:10:06.130 --> 00:10:12.370
that converts from Celsius to Fahrenheit.
So, temp Fahrenheit is equal to, well,

138
00:10:12.370 --> 00:10:17.720
let's see what my formula says, it says
9/5, times, well, Tip Celsius.

139
00:10:18.720 --> 00:10:21.820
Plus, 32.
Let's make it print out.

140
00:10:21.820 --> 00:10:32.090
Print, Temp Fahrenheit So again, if the,
temperature is zero degrees Celsius, we'd

141
00:10:32.090 --> 00:10:36.410
expect 32 degrees Fahrenheit.
So sure enough it worked.

142
00:10:36.410 --> 00:10:41.250
Let's just do one more test real quick,
it's always good to at least do a couple

143
00:10:41.250 --> 00:10:45.310
of tests when building things.
So if his temperature is 100 degrees

144
00:10:45.310 --> 00:10:50.280
Celsius that's boiling so that should be
212 degrees Fahrenheit, so sure enough it

145
00:10:50.280 --> 00:10:53.300
worked.
So those are a couple of examples of using

146
00:10:53.300 --> 00:10:58.330
variables to organize your computations.
Now in our next lecture we talk about more

147
00:10:58.330 --> 00:11:03.120
programming in Python, Scott's going to
talk about functions and he'll actually

148
00:11:03.120 --> 00:11:07.420
come back and revisit this example.
I'll see you in a few more lectures.