WEBVTT

1
00:00:00.000 --> 00:00:06.368
[MUSIC]

2
00:00:06.368 --> 00:00:09.841
Well I had planned to use a fabulous
clip from the Big Bang Theory and

3
00:00:09.841 --> 00:00:14.495
have Sheldon Cooper explain the rules to
Rock-paper-scissors-lizard-Spock, but

4
00:00:14.495 --> 00:00:18.111
unfortunately the copyright police
told me that was a very bad idea.

5
00:00:18.111 --> 00:00:22.244
So since my wife thinks that I'm already
a lot like Sheldon I'm going to take my

6
00:00:22.244 --> 00:00:26.512
crack at explaining the rules to
Rock-paper-scissors-lizard-Spock a la

7
00:00:26.512 --> 00:00:27.498
Sheldon Cooper.

8
00:00:33.565 --> 00:00:35.220
Let's do this.

9
00:00:35.220 --> 00:00:36.690
It's very simple.

10
00:00:36.690 --> 00:00:39.310
Scissors cuts paper, paper covers rock.

11
00:00:39.310 --> 00:00:42.110
Rock crushes lizard, lizard poisons Spock.

12
00:00:42.110 --> 00:00:45.055
Spock smashes scissors,
scissors decapitates lizard.

13
00:00:45.055 --> 00:00:49.360
Lizard eats paper, paper disproves Spock,
Spock vaporizes rock,

14
00:00:49.360 --> 00:00:53.010
and as always has been,
rock crushes scissors.

15
00:00:53.010 --> 00:00:53.510
Yeah.

16
00:00:57.300 --> 00:00:59.192
Well I hope you enjoyed that.

17
00:00:59.192 --> 00:01:02.140
Our mini-project for
the end of week one, and

18
00:01:02.140 --> 00:01:06.490
the first one that you will turn in for a
grade is Rock-paper-scissors-lizard-Spock.

19
00:01:06.490 --> 00:01:09.630
Now when we were brainstorming on kind
of what mini-projects we should use for

20
00:01:09.630 --> 00:01:14.250
this class, our first inclination
was to do something on income taxes.

21
00:01:14.250 --> 00:01:18.360
So I kind of bounced this idea off of my
focus group at home consisting of my three

22
00:01:18.360 --> 00:01:19.240
kids.

23
00:01:19.240 --> 00:01:22.230
And their reaction was Income taxes, yuck.

24
00:01:22.230 --> 00:01:24.270
Who wants to do income taxes?

25
00:01:24.270 --> 00:01:28.310
So we watch a lot of Big Bang Theory at
home, and so they came up with the idea,

26
00:01:28.310 --> 00:01:30.710
hey yeah let's do something on
Rock-paper-scissors-lizard-Spock.

27
00:01:30.710 --> 00:01:33.110
So that's where the idea came from.

28
00:01:33.110 --> 00:01:34.980
In this video I'm going to
do you two things.

29
00:01:34.980 --> 00:01:38.095
I'm going to start off by walking
you through the rules for

30
00:01:38.095 --> 00:01:41.770
Rock-paper-scissors and then later
Rock-paper-scissors-lizard-Spock.

31
00:01:41.770 --> 00:01:43.890
And I'll show you kind
of a clever idea for

32
00:01:43.890 --> 00:01:47.820
how to determine who wins the game
of Rock-paper-scissors-lizard-Spock.

33
00:01:47.820 --> 00:01:52.060
And in the second part of the video,
I'll walk you through the mini-project and

34
00:01:52.060 --> 00:01:56.140
then in particular I'll show you how you
can get help if you're having trouble

35
00:01:56.140 --> 00:01:58.350
actually completing the mini-project.

36
00:01:58.350 --> 00:02:01.800
We've got kind of some nice support
structures in place in the class.

37
00:02:01.800 --> 00:02:05.460
And I'll show you how to use those and
If you get stuck, you should come back and

38
00:02:05.460 --> 00:02:08.620
look at this video, because I give you
some nice hints about how to proceed.

39
00:02:08.620 --> 00:02:09.943
Okay, let's go on and get started.

40
00:02:13.915 --> 00:02:17.184
All right, let's go through the rules
of Rock-paper-scissors-lizard-Spock

41
00:02:17.184 --> 00:02:18.790
a little slower.

42
00:02:18.790 --> 00:02:21.710
So this is just a variant
of Rock-paper-scissors.

43
00:02:21.710 --> 00:02:25.020
We have rock, paper, and scissors.

44
00:02:25.020 --> 00:02:29.140
So rock smashes scissors,
scissors cuts paper, paper covers rock.

45
00:02:29.140 --> 00:02:33.820
The problem with playing rock paper
scissor is that you tie a lot.

46
00:02:33.820 --> 00:02:36.340
And if you play friends where
they kind of know your patterns,

47
00:02:36.340 --> 00:02:38.420
you may tie more than half the time.

48
00:02:38.420 --> 00:02:41.890
So one way to avoid having lots
of ties is to add more items.

49
00:02:41.890 --> 00:02:45.810
So this variant you add in lizard,
and you add in Spock.

50
00:02:47.200 --> 00:02:50.960
And this little poem over here is
actually what Sheldon recites on

51
00:02:50.960 --> 00:02:54.110
The Big Bang Theory to describe it.

52
00:02:54.110 --> 00:02:55.960
My kids love it when I do this.

53
00:02:55.960 --> 00:03:00.950
But I don't expect you to actually
program this rules in your first project.

54
00:03:00.950 --> 00:03:05.170
I'm going to tell you a simpler way using,
surprise, surprise, modular arithmetic.

55
00:03:05.170 --> 00:03:09.190
So over here I have
the Rock-paper-scissor-lizard-Spock wheel.

56
00:03:09.190 --> 00:03:13.350
And in fact it's really the
Rock-Spock-paper-lizard-scissors wheel.

57
00:03:13.350 --> 00:03:16.120
And the way to remember this is
you put Spock next to rock and

58
00:03:16.120 --> 00:03:18.020
lizard next to scissors.

59
00:03:18.020 --> 00:03:20.180
Now why is this wheel useful?

60
00:03:20.180 --> 00:03:22.480
It's because I can
figure out who I win and

61
00:03:22.480 --> 00:03:25.280
lose to based on where I sit on the wheel.

62
00:03:25.280 --> 00:03:28.110
So, let's consider Spock.

63
00:03:28.110 --> 00:03:31.200
Spock always beats his
counterclockwise opponents.

64
00:03:31.200 --> 00:03:34.420
Spock vaporizes rock,
Spock smashes scissors.

65
00:03:34.420 --> 00:03:36.850
But he always loses to
his clockwise opponents.

66
00:03:36.850 --> 00:03:38.310
Paper disproves Spock.

67
00:03:38.310 --> 00:03:39.400
Lizard poisons Spock.

68
00:03:40.750 --> 00:03:43.380
In fact this holds for
every item on the wheel.

69
00:03:43.380 --> 00:03:46.970
So if we want to go through and figure
out who wins at Rock-paper-scissors,

70
00:03:46.970 --> 00:03:51.720
we can take the numbers for each of the
items, take a look at their difference.

71
00:03:51.720 --> 00:03:53.920
So we could take paper minus Spock.

72
00:03:55.030 --> 00:04:00.470
Okay, paper appears on the clockwise,
so two minus one is positive, it's one.

73
00:04:00.470 --> 00:04:02.530
Therefore, paper beats Spock.

74
00:04:03.540 --> 00:04:07.160
Okay, lizard, three minus one is two,
it's actually clockwise.

75
00:04:08.180 --> 00:04:12.400
What about, let's see,
you have scissors minus Spock.

76
00:04:12.400 --> 00:04:13.870
We have four minus one that's three.

77
00:04:13.870 --> 00:04:17.120
Well let's see three has gone far
enough around we're actually kind of

78
00:04:17.120 --> 00:04:17.810
counter clockwise.

79
00:04:19.140 --> 00:04:21.810
In fact we have this rock, rock is four.

80
00:04:21.810 --> 00:04:26.840
So we have zero minus one,
it's negative one.

81
00:04:26.840 --> 00:04:28.750
Gosh what do we do there?

82
00:04:28.750 --> 00:04:31.910
We could use modular
particular remainders.

83
00:04:31.910 --> 00:04:35.360
We could go through and
take minus one remainder five.

84
00:04:35.360 --> 00:04:36.450
Remember what I talked about.

85
00:04:36.450 --> 00:04:39.260
Whenever you have a negative number
you're taking your remainder

86
00:04:39.260 --> 00:04:41.780
just think about adding in the number
you're taking the remainder with

87
00:04:41.780 --> 00:04:45.330
as many times as it takes to get it
in the range between zero and five.

88
00:04:45.330 --> 00:04:49.250
So here if we take negative one,
we add five to it, we get four.

89
00:04:49.250 --> 00:04:52.830
So the rule is really if you take
the first item minus the second,

90
00:04:52.830 --> 00:04:55.440
if the difference is one or
two, the first items wins.

91
00:04:55.440 --> 00:04:58.150
If the difference is three or
four, the second item wins.

92
00:04:59.150 --> 00:05:02.090
So we'll go and
see that in a program to in a second.

93
00:05:02.090 --> 00:05:04.220
This is a simpler way to
actually program the stuff.

94
00:05:04.220 --> 00:05:07.371
All you're going to need to do
is build an else, else-if, if,

95
00:05:07.371 --> 00:05:11.520
else-if, else clause and
use a little modular arithmetic.

96
00:05:11.520 --> 00:05:15.176
So, let's move on to program template, and
I'll kind of, it will be more tangible.

97
00:05:18.235 --> 00:05:21.730
Okay, let's get started on
Rock-paper-scissors-lizard-Spock.

98
00:05:21.730 --> 00:05:24.890
So here we are on week one, and
we have our first two lessons and

99
00:05:24.890 --> 00:05:30.350
the third lesson, as always,
is material for this week's mini-project.

100
00:05:30.350 --> 00:05:33.800
You're watching the video for
the mini-project.

101
00:05:33.800 --> 00:05:38.880
Let's start by talking and walking
through the mini-project description.

102
00:05:38.880 --> 00:05:41.440
Now the next segment's going to actually
show you that description is going to be

103
00:05:41.440 --> 00:05:43.790
in a slightly different interface
because it's a shot about two and

104
00:05:43.790 --> 00:05:44.380
a half years ago.

105
00:05:46.680 --> 00:05:52.210
So just like for mini project zero,
we have a description of the mini-project.

106
00:05:52.210 --> 00:05:53.680
It has some kind of an overview here.

107
00:05:53.680 --> 00:05:56.440
Kind of the same thing we talked
about in the previous segment.

108
00:05:57.440 --> 00:05:59.223
And then it has a very detailed,

109
00:05:59.223 --> 00:06:04.790
step-by-step walk-through of implementing
Rock-paper-scissors-lizard-Spock.

110
00:06:04.790 --> 00:06:05.750
Please read this.

111
00:06:05.750 --> 00:06:10.250
This gives you important hints
on how to implement the project.

112
00:06:10.250 --> 00:06:10.900
For example,

113
00:06:10.900 --> 00:06:15.190
it mentions when you're generating
random numbers, use random.randrange.

114
00:06:15.190 --> 00:06:18.220
So read that, it'll give you
lots of nice hints on there.

115
00:06:18.220 --> 00:06:24.230
Notice it also includes what the output
of the program should look like.

116
00:06:24.230 --> 00:06:25.860
So if you're curious kind of
what it should produce,

117
00:06:25.860 --> 00:06:28.360
it should produce
something in this format.

118
00:06:28.360 --> 00:06:34.500
It includes a grading rubric that
discusses how to handle deviations and

119
00:06:34.500 --> 00:06:39.750
then gives you items for how to evaluate
if your implementation is correct or not.

120
00:06:39.750 --> 00:06:42.930
So it's important that you
familiarize yourself with this.

121
00:06:42.930 --> 00:06:47.310
One important point here the first rubric
item says you need to use CodeSkulptor.

122
00:06:47.310 --> 00:06:51.240
Don't try to cut and
paste your code into the submission box.

123
00:06:51.240 --> 00:06:54.080
I know it's tempting because you
want to use a tool like Idle.

124
00:06:54.080 --> 00:06:56.960
Well you can kind of get by it with it for
this project, but

125
00:06:56.960 --> 00:06:59.800
in the future you're going to need to
be using CodeSkulptor because a lot of

126
00:06:59.800 --> 00:07:02.110
the interactivity is going to take
place inside the web browser.

127
00:07:02.110 --> 00:07:05.830
It's not going to be able to
be implemented inside Idle.

128
00:07:05.830 --> 00:07:08.560
So just get used to it now,
use CodeSkulptor,

129
00:07:08.560 --> 00:07:11.620
it's going to make peer assessment
much more reliable and much more easy.

130
00:07:12.620 --> 00:07:16.870
When you're ready to start writing code,
you can scroll up here,

131
00:07:16.870 --> 00:07:17.732
we have a template.

132
00:07:17.732 --> 00:07:20.190
Every mini-project has a template,
we can click on this.

133
00:07:21.260 --> 00:07:26.490
And this pops up, basically a CodeSkulptor
URL which contains the starting point for

134
00:07:26.490 --> 00:07:28.020
your project.

135
00:07:28.020 --> 00:07:30.750
Really if you look at the project there's
really three things you need to do.

136
00:07:30.750 --> 00:07:35.700
You need to implement a function number
to name, a function name to number, and

137
00:07:35.700 --> 00:07:36.520
a function RPSLS.

138
00:07:36.520 --> 00:07:40.270
So you kind of have to fill in
these comments with Python code.

139
00:07:42.030 --> 00:07:45.740
At the bottom,
there are five calls to RPSLS

140
00:07:45.740 --> 00:07:49.940
that will essentially test if your
implementation is correct or not.

141
00:07:49.940 --> 00:07:55.040
So when you run your code you should
expect to see some text appear over here.

142
00:07:55.040 --> 00:07:58.189
And we've actually echoed
that text right here for you.

143
00:08:00.555 --> 00:08:04.440
I'll also show it to you in the video so
you can actually see it in action.

144
00:08:04.440 --> 00:08:09.040
This is my implementation of
Rock-paper-scissors-lizard-Spock.

145
00:08:09.040 --> 00:08:12.790
You can see, it might ask, but where
are my definitions of these functions?

146
00:08:12.790 --> 00:08:14.119
I've used a function,

147
00:08:14.119 --> 00:08:17.875
basically kind of a feature of
CodeSkulptor called code folding.

148
00:08:17.875 --> 00:08:22.490
If you right click on this little column
here, you can actually either fold up and

149
00:08:22.490 --> 00:08:24.410
hide code or expose code.

150
00:08:24.410 --> 00:08:29.850
I've actually hid the definitions of
number_to_name, name_to_number, and rpsls.

151
00:08:29.850 --> 00:08:34.610
If I run this, what you can see
here is the textual output.

152
00:08:34.610 --> 00:08:36.370
So, I notice a couple
of things about this,

153
00:08:36.370 --> 00:08:40.920
that using random numbers I made
kind of a different response for

154
00:08:40.920 --> 00:08:43.950
the computer on each particular
individual game here.

155
00:08:43.950 --> 00:08:46.450
So, I didn't always choose
the same value for the computer.

156
00:08:46.450 --> 00:08:50.940
And then if I run this again I see
different choices for the computer.

157
00:08:50.940 --> 00:08:54.000
Notice the player's choices are always
the same for every single run, and

158
00:08:54.000 --> 00:08:55.830
that's because we have
these five values here.

159
00:08:57.910 --> 00:09:01.045
So this is kind of a way
to get you started on doing

160
00:09:01.045 --> 00:09:03.180
Rock-paper-scissors-lizard-Spock.

161
00:09:03.180 --> 00:09:06.189
Now what I'll do next,
is I'll walk you through how to get help,

162
00:09:06.189 --> 00:09:08.673
if you get stuck in
implementing the mini-project.

163
00:09:12.424 --> 00:09:15.450
Okay, you're working on your
mini-project and you get stuck.

164
00:09:15.450 --> 00:09:16.700
It's going to happen.

165
00:09:16.700 --> 00:09:21.480
So what do you do to get through and
finish off the mini-project?

166
00:09:21.480 --> 00:09:25.820
Well, the first thing you can do is,
if you're confused about some particular

167
00:09:25.820 --> 00:09:30.400
Python concept, go back and take
a look at the appropriate class video.

168
00:09:30.400 --> 00:09:33.260
For example, if you don't
understand how conditionals work,

169
00:09:33.260 --> 00:09:35.180
take a look at Scott's
video on conditionals.

170
00:09:36.460 --> 00:09:40.100
We tried to include in the videos
all the concepts that you

171
00:09:40.100 --> 00:09:42.980
need to finish that particular
week's mini-project.

172
00:09:42.980 --> 00:09:46.680
Okay, that didn't get you unstuck.

173
00:09:46.680 --> 00:09:47.540
All right.

174
00:09:47.540 --> 00:09:50.500
Go back and look at
the mini-project description again,

175
00:09:50.500 --> 00:09:53.670
in particular,
take a look at the development process.

176
00:09:53.670 --> 00:09:57.670
There are lots of details here about
how to actually implement the project.

177
00:09:59.010 --> 00:10:02.490
If you're not following the development
process, it's easy to get lost.

178
00:10:02.490 --> 00:10:05.192
And so if you're having trouble,
go back and take a deep look at it.

179
00:10:07.234 --> 00:10:10.027
All right, you've gone back over
the development process and

180
00:10:10.027 --> 00:10:13.010
you're still having trouble
finishing off your mini-project.

181
00:10:13.010 --> 00:10:15.550
Here are a few more
ideas on how to proceed.

182
00:10:16.850 --> 00:10:20.330
The next thing I notice is we actually
have a practice mini-project here.

183
00:10:20.330 --> 00:10:22.160
Again, it's totally optional.

184
00:10:22.160 --> 00:10:26.540
It was created by one of the students
that has helped out with the class for

185
00:10:26.540 --> 00:10:29.080
many years named Andrea.

186
00:10:29.080 --> 00:10:32.350
She's built a template that has kind
of a description of what you need to do

187
00:10:32.350 --> 00:10:34.730
in the comments inside the template.

188
00:10:34.730 --> 00:10:37.090
It has a solution that
you can look at in here.

189
00:10:37.090 --> 00:10:40.230
Probably the most important thing
it has all the same elements

190
00:10:40.230 --> 00:10:41.840
that Rock-paper-scissors-lizard-Spock has.

191
00:10:41.840 --> 00:10:44.850
And so if you're stuck on it
you can actually go out and

192
00:10:44.850 --> 00:10:47.930
just try to do this practice
mini-project instead.

193
00:10:47.930 --> 00:10:49.440
And look at the solution.

194
00:10:49.440 --> 00:10:53.150
Look at how the solution solved a lot
of the same problems that you would see

195
00:10:53.150 --> 00:10:54.715
in Rock-paper-scissors-lizard-Spock.

196
00:10:55.830 --> 00:11:02.075
If that doesn't work, you have
a very powerful tool available here.

197
00:11:02.075 --> 00:11:04.455
We have discussion forums.

198
00:11:04.455 --> 00:11:07.515
The discussion forums are empty right now,
but when you're taking this class,

199
00:11:07.515 --> 00:11:10.995
they'll be thousands of students out
there participating in the class, and

200
00:11:10.995 --> 00:11:15.102
you'll see hundreds of posts
linked to material in the class.

201
00:11:15.102 --> 00:11:18.692
What I suggest you do is, go through
the forum for the particular week you're

202
00:11:18.692 --> 00:11:24.372
working on and look for threads that have
questions related to what you're stuck on.

203
00:11:24.372 --> 00:11:27.810
If you don't find a thread that has
anything related to what your stuck on,

204
00:11:27.810 --> 00:11:28.640
post a new thread.

205
00:11:30.400 --> 00:11:32.980
Help out your peers,
they'll help you back.

206
00:11:32.980 --> 00:11:35.280
We have mentors that
are associated with the class,

207
00:11:35.280 --> 00:11:37.700
better than a dozen of them,
they're very, very dutiful,

208
00:11:37.700 --> 00:11:40.490
they'll be there answering
questions inside the forums also.

209
00:11:40.490 --> 00:11:42.930
This is a way for
you to interact with your peers, and

210
00:11:42.930 --> 00:11:46.180
get help with finishing
off the mini-project.

211
00:11:46.180 --> 00:11:50.121
Okay, if that doesn't work we have
a couple more ideas to finish things off.

212
00:11:53.415 --> 00:11:56.870
All right, you consulted the forms and
you're still stuck.

213
00:11:56.870 --> 00:11:59.090
We still got more help for you.

214
00:11:59.090 --> 00:12:02.720
The next thing I suggest you do is inside
CodeSkulptor there is a button up here

215
00:12:02.720 --> 00:12:04.120
that says Tips.

216
00:12:04.120 --> 00:12:10.830
This links to a particular thread inside
the current week's mini-project forum.

217
00:12:10.830 --> 00:12:13.910
So here in the form for
Rock-paper-scissors-lizard-Spock, and

218
00:12:13.910 --> 00:12:18.470
I've created a thread called
Code Clinic tips for RPSLS.

219
00:12:18.470 --> 00:12:23.810
So in this thread, I've essentially
posted some information about students'

220
00:12:23.810 --> 00:12:28.760
errors and things to help with solving
this particular week's mini-project.

221
00:12:28.760 --> 00:12:31.680
For this session, what we're going
to do is we're going to always

222
00:12:31.680 --> 00:12:36.210
start off with some essentially testing
functions to help you make sure

223
00:12:36.210 --> 00:12:39.720
that the helper functions you're building
for your mini project are correct.

224
00:12:39.720 --> 00:12:43.300
So, remember you have to implement
name to number and number to name?

225
00:12:43.300 --> 00:12:47.110
We even put out here two CodeSkulptor URLs
that you can use to test to see if your

226
00:12:47.110 --> 00:12:49.470
implementations of those
functions are correct.

227
00:12:49.470 --> 00:12:54.330
So for example, if I click on this,
it pops up a CodeSkulptor URL

228
00:12:54.330 --> 00:12:59.620
which has a place for you to paste in
your definition of name_to_number.

229
00:12:59.620 --> 00:13:02.940
Then it has some test
calls to name_to_number

230
00:13:02.940 --> 00:13:04.780
with appropriate input data.

231
00:13:04.780 --> 00:13:07.600
And it tells you what
should come out of that.

232
00:13:07.600 --> 00:13:09.570
What the output format should look like.

233
00:13:09.570 --> 00:13:12.290
So if your implementation of name and
number is correct,

234
00:13:12.290 --> 00:13:14.901
you paste it in here you should see
something like this coming out.

235
00:13:14.901 --> 00:13:17.140
This basically gives
you a way to check and

236
00:13:17.140 --> 00:13:19.950
see if your helper function
is written correctly.

237
00:13:19.950 --> 00:13:23.470
If it passes this test, there's a good
chance the implementation is correct.

238
00:13:24.790 --> 00:13:26.485
There's also one here for number_to_name.

239
00:13:27.830 --> 00:13:32.700
The thread also includes observations
from previous iterations of the class.

240
00:13:32.700 --> 00:13:36.750
Here's some examples of kind of common
errors that I've observed in working with

241
00:13:36.750 --> 00:13:37.400
students.

242
00:13:38.480 --> 00:13:42.680
Things like always capitalize Spock,
Python is sensitive to case.

243
00:13:43.820 --> 00:13:46.790
There's one thing I mentioned here was
this thing called, the Code Clinic.

244
00:13:46.790 --> 00:13:49.500
So how did I get all these observations?

245
00:13:49.500 --> 00:13:53.590
I, the other instructors and the community
TAs, have a special email address that

246
00:13:53.590 --> 00:13:58.670
we've set up where you can, as a matter
of last resort, send requests for help.

247
00:13:59.790 --> 00:14:06.420
For this session,
it's interactivepython@online.rice.edu.

248
00:14:06.420 --> 00:14:07.260
Send email to this.

249
00:14:07.260 --> 00:14:10.312
We have a professional help desk
that's actually helping us.

250
00:14:10.312 --> 00:14:13.450
You should get an automatic response
if the Code Clinic is overloaded.

251
00:14:13.450 --> 00:14:16.266
You'll get a response saying
it's going to take a long time,

252
00:14:16.266 --> 00:14:17.570
you may not get a response.

253
00:14:18.890 --> 00:14:21.840
Your email will actually be sent
to one of the instructors of

254
00:14:21.840 --> 00:14:23.092
one of the community TAs.

255
00:14:23.092 --> 00:14:25.510
And they'll have a chance to help you.

256
00:14:25.510 --> 00:14:30.070
Now, this class is going to have
many tens of thousands of students.

257
00:14:30.070 --> 00:14:31.580
If you're all trying to do
the project at once, and

258
00:14:31.580 --> 00:14:34.410
there's maybe a dozen of
us trying to answer email,

259
00:14:34.410 --> 00:14:38.650
this is only going to work if you use
this under the following circumstances.

260
00:14:38.650 --> 00:14:42.500
You've tried all the other ways I've
discussed of help, of trying to seek help.

261
00:14:44.650 --> 00:14:48.290
You only send us an email
with a CodeSkulptor URL

262
00:14:48.290 --> 00:14:50.360
that's relevant to the current
week's mini-project.

263
00:14:50.360 --> 00:14:53.950
This is not a way to get questions
answered about concepts about the class.

264
00:14:53.950 --> 00:14:55.380
Post that in the forum.

265
00:14:55.380 --> 00:14:58.060
We're going to ignore all other requests.

266
00:14:58.060 --> 00:15:01.120
But if you're stuck and you think,
man I know I'm just like a just like

267
00:15:01.120 --> 00:15:02.960
one little change away from
getting the mini-project done,

268
00:15:02.960 --> 00:15:07.320
and you're getting frustrated send it
here we're going to do our best to help.

269
00:15:07.320 --> 00:15:11.420
What will happen is, at the end
of the day, we'll try to send you

270
00:15:11.420 --> 00:15:14.920
back maybe a modified CodeSkulptor URL
that will point out where your error was,

271
00:15:14.920 --> 00:15:17.260
or give you a hint in
terms of trying to do it.

272
00:15:17.260 --> 00:15:20.620
It may turn out there
are too many requests.

273
00:15:20.620 --> 00:15:24.450
And so this is something that
we're doing our best at here.

274
00:15:24.450 --> 00:15:27.130
My wife, I actually spent so
much time at the Code Clinic last time,

275
00:15:27.130 --> 00:15:30.190
my wife actually got me
a custom t shirt for this.

276
00:15:30.190 --> 00:15:33.740
We're going to do our best to help
every single one of you, and so

277
00:15:33.740 --> 00:15:36.250
please be patient with us
especially on this first,

278
00:15:36.250 --> 00:15:38.850
first couple of mini projects
if we get overwhelmed in there.

279
00:15:38.850 --> 00:15:41.250
We've got better technology this time,
and we're going to do our best.

280
00:15:41.250 --> 00:15:45.450
But again only use it for
code that's sick.

281
00:15:45.450 --> 00:15:46.970
If your code is feeling ill and

282
00:15:46.970 --> 00:15:51.490
not doing very well send us a url,
we'll take a shot at helping fix it.

283
00:15:51.490 --> 00:15:53.360
Okay good luck on the mini-project.

284
00:15:53.360 --> 00:15:54.220
You can do it.